/**
 * PracticeView Component
 * Multimodal practice interface with voice, image, and interactive exercises
 */

'use client';

import { useState, useEffect } from 'react';
import { useLearningStore } from '@/lib/stores/enhanced-learning';
import { nuruAI } from '@/lib/services/enhanced-nuru-ai';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { 
  Mic, 
  Volume2, 
  Image as ImageIcon, 
  MessageSquare,
  Target,
  Zap,
  Trophy,
  Star,
  Clock,
  RotateCcw,
  CheckCircle2,
  XCircle,
  Brain,
  Gamepad2,
  BookOpen,
  Globe,
  Play,
  Pause,
  Square} from 'lucide-react';
import type { RealTimeSession } from '@/lib/types/education';

export function PracticeView() {
  const { currentUser, currentSession, isAuthenticated, addNotification } = useLearningStore();

  // Mock methods and properties that aren't available in enhanced store yet
  const currentLanguage = 'en';
  const targetLanguage = 'kpelle';
  const currentSubject = 'language-arts';
  const practiceSession = null;
  const isRecording = false;
  const audioLevel = 0;
  const isAudioPlaying = false;
  
  const startPractice = (config: any) => {
    console.log("Starting practice:", config);
    setIsSessionActive(true);
    // TODO: Implement in enhanced store
  };
  
  const submitPracticeAnswer = (answer: any) => {
    console.log("Submitting practice answer:", answer);
    // TODO: Implement in enhanced store
    return Promise.resolve({ correct: true, score: 100 });
  };
  
  const generatePracticeContent = (config: any) => {
    console.log("Generating practice content:", config);
    // TODO: Implement in enhanced store
    return Promise.resolve([]);
  };
  
  const analyzeUserPerformance = (data: any) => {
    console.log("Analyzing user performance:", data);
    // TODO: Implement in enhanced store
    return Promise.resolve({});
  };
  
  const startRecording = () => {
    console.log("Starting recording");
    // TODO: Implement audio recording
  };
  
  const stopRecording = () => {
    console.log("Stopping recording");
    // TODO: Implement audio recording
  };
  
  const playAudio = (audio: string) => {
    console.log("Playing audio:", audio);
    // TODO: Implement audio playback
  };

  const [currentExercise, setCurrentExercise] = useState<number>(0);
  const [selectedMode, setSelectedMode] = useState<'voice' | 'text' | 'image' | 'mixed'>('mixed');
  const [difficulty, setDifficulty] = useState<number[]>([2]);
  const [adaptiveMode, setAdaptiveMode] = useState(true);
  const [userAnswer, setUserAnswer] = useState<string>('');
  const [showFeedback, setShowFeedback] = useState(false);
  const [score, setScore] = useState(0);
  const [streak, setStreak] = useState(0);
  const [timeRemaining, setTimeRemaining] = useState(300); // 5 minutes
  const [isSessionActive, setIsSessionActive] = useState(false);

  // Mock practice data - in production this would be generated by AI
  const mockUser = currentUser || {
    id: 'user-1',
    name: 'Practice User',
    email: 'user@example.com',
    language: 'en',
    avatar: '',
    preferredSubjects: ['language-arts'],
    currentLevel: 'beginner',
    joinDate: new Date().toISOString(),
    lastActive: new Date().toISOString(),
    totalXP: 0,
    currentStreak: 0,
    longestStreak: 0,
    badges: [],
    preferences: {
      audioEnabled: true,
      notificationsEnabled: true,
      difficulty: 'medium',
      culturalContext: true,
      adaptiveLearning: true
    },
    stats: {
      totalSessions: 0,
      totalTimeSpent: 0,
      averageAccuracy: 0,
      subjectProgress: {}
    },
    dailyProgress: 0
  };

  const mockActivity: any = {
    id: 'activity-1',
    title: 'Voice Practice',
    description: 'Practice pronunciation',
    type: 'pronunciation',
    duration: 5,
    difficulty: 'medium',
    xpReward: 10
  };

  const realTimePracticeSession: RealTimeSession = {
    sessionId: 'practice-001',
    participants: [],
    mode: 'ai-tutor',
    currentActivity: mockActivity,
    realTimeData: {
      audioStream: undefined,
      videoStream: undefined,
      sharedScreen: undefined
    },
    feedback: {
      live: true,
      aiInsights: {
        strengths: ['pronunciation'],
        learningStyle: 'visual',
        recommendations: ['Practice more pronunciation exercises', 'Focus on tone patterns'],
        nextLessonSuggestions: ['Advanced Pronunciation', 'Cultural Greetings'],
        culturalConnectionPoints: ['Traditional greetings', 'Respectful communication']
      },
      performance: {
        completionPercentage: 0,
        conceptsMastered: [],
        areasForImprovement: [],
        timeSpent: 0,
        interactionCount: 0,
        accuracyScore: 0,
        culturalContextScore: 0
      }
    }
  };

  const mockPracticeSession: any = {
    id: 'practice-001',
    type: 'mixed',
    difficulty: difficulty[0],
    totalExercises: 10,
    timeLimit: 300,
    subject: currentSubject,
    exercises: [
      {
        id: 'ex-1',
        type: 'pronunciation',
        content: {
          text: 'Practice saying "Kwa kii" (Good morning)',
          targetPhrase: 'Kwa kii',
          audio: '/audio/kwa-kii.mp3',
          culturalNote: 'Used for morning greetings with respect'
        },
        expectedAnswer: 'kwa kii pronunciation',
        points: 10,
        timeLimit: 30
      },
      {
        id: 'ex-2',
        type: 'translation',
        content: {
          text: 'Translate to English: "Nyuma"',
          sourceText: 'Nyuma',
          sourceLanguage: 'kpelle',
          targetLanguage: 'english'
        },
        expectedAnswer: 'thank you',
        points: 15,
        timeLimit: 20
      },
      {
        id: 'ex-3',
        type: 'listening',
        content: {
          text: 'Listen and type what you hear',
          audio: '/audio/listening-exercise.mp3',
          instructions: 'Type the Kpelle phrase you hear'
        },
        expectedAnswer: 'kollie ke',
        points: 20,
        timeLimit: 25
      },
      {
        id: 'ex-4',
        type: 'cultural',
        content: {
          text: 'When would you use "Kwa kelee"?',
          options: ['Morning', 'Afternoon', 'Evening', 'Night'],
          culturalContext: 'Different greetings are used at different times'
        },
        expectedAnswer: 'Evening',
        points: 10,
        timeLimit: 15
      },
      {
        id: 'ex-5',
        type: 'image_recognition',
        content: {
          text: 'What cultural activity is shown in this image?',
          image: '/images/kpelle-ceremony.jpg',
          options: ['Market day', 'Ceremony', 'School', 'Farming'],
          culturalNote: 'Traditional ceremonies are central to Kpelle culture'
        },
        expectedAnswer: 'Ceremony',
        points: 15,
        timeLimit: 20
      }
    ],
    culturalContext: {
      background: 'Practice with authentic Kpelle expressions in real-world contexts',
      traditions: ['Respectful communication', 'Community interaction', 'Cultural ceremonies'],
      vocabulary: [
        { kpelle: 'Kwa kii', english: 'Good morning', context: 'Morning greeting' },
        { kpelle: 'Nyuma', english: 'Thank you', context: 'Gratitude expression' }
      ]
    }
  };

  const session = practiceSession || mockPracticeSession;
  const currentExerciseData = session.exercises[currentExercise];

  // Timer effect
  useEffect(() => {
    let timer: NodeJS.Timeout;
    if (isSessionActive && timeRemaining > 0) {
      timer = setTimeout(() => {
        setTimeRemaining(prev => prev - 1);
      }, 1000);
    } else if (timeRemaining === 0) {
      handleSessionEnd();
    }
    return () => clearTimeout(timer);
  }, [isSessionActive, timeRemaining]);

  const handleStartPractice = () => {
    setIsSessionActive(true);
    startPractice({ mode: selectedMode, difficulty: difficulty.toString() });
  };

  const handleSubmitAnswer = () => {
    const isCorrect = userAnswer.toLowerCase().trim() === currentExerciseData.expectedAnswer.toLowerCase().trim();
    
    if (isCorrect) {
      setScore(prev => prev + currentExerciseData.points);
      setStreak(prev => prev + 1);
    } else {
      setStreak(0);
    }

    submitPracticeAnswer(userAnswer);
    setShowFeedback(true);

    setTimeout(() => {
      if (currentExercise < session.exercises.length - 1) {
        setCurrentExercise(prev => prev + 1);
        setUserAnswer('');
        setShowFeedback(false);
      } else {
        handleSessionEnd();
      }
    }, 2000);
  };

  const handleSessionEnd = () => {
    setIsSessionActive(false);
    analyzeUserPerformance({ score, streak, exercises: currentExercise + 1 });
  };

  const handleSkipExercise = () => {
    if (currentExercise < session.exercises.length - 1) {
      setCurrentExercise(prev => prev + 1);
      setUserAnswer('');
      setShowFeedback(false);
      setStreak(0);
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const progress = ((currentExercise + (showFeedback ? 1 : 0)) / session.exercises.length) * 100;

  if (!isAuthenticated) {
    return (
      <div className="flex items-center justify-center h-full">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <Target className="w-12 h-12 mx-auto text-primary-500 mb-4" />
            <CardTitle>Sign In Required</CardTitle>
            <CardDescription>
              Please sign in to access practice sessions and track your progress.
            </CardDescription>
          </CardHeader>
        </Card>
      </div>
    );
  }

  if (!isSessionActive && currentExercise === 0) {
    return (
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Setup Header */}
        <div className="text-center space-y-4">
          <h1 className="text-3xl font-bold text-gray-900">Practice Session</h1>
          <p className="text-gray-600">Choose your practice mode and difficulty level</p>
        </div>

        {/* Practice Mode Selection */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <Gamepad2 className="w-5 h-5" />
              <span>Practice Mode</span>
            </CardTitle>
            <CardDescription>Select how you want to practice today</CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs value={selectedMode} onValueChange={(value) => setSelectedMode(value as any)}>
              <TabsList className="grid w-full grid-cols-4">
                <TabsTrigger value="voice" className="flex items-center space-x-1">
                  <Mic className="w-4 h-4" />
                  <span>Voice</span>
                </TabsTrigger>
                <TabsTrigger value="text" className="flex items-center space-x-1">
                  <MessageSquare className="w-4 h-4" />
                  <span>Text</span>
                </TabsTrigger>
                <TabsTrigger value="image" className="flex items-center space-x-1">
                  <ImageIcon className="w-4 h-4" />
                  <span>Image</span>
                </TabsTrigger>
                <TabsTrigger value="mixed" className="flex items-center space-x-1">
                  <Brain className="w-4 h-4" />
                  <span>Mixed</span>
                </TabsTrigger>
              </TabsList>

              <TabsContent value="voice" className="space-y-4 mt-6">
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h3 className="font-medium mb-2">Voice Practice</h3>
                  <p className="text-sm text-gray-600">Focus on pronunciation, listening, and speaking exercises</p>
                  <div className="flex items-center space-x-2 mt-3">
                    <Mic className="w-4 h-4 text-blue-500" />
                    <span className="text-sm">Includes: Pronunciation, Voice recognition, Accent training</span>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="text" className="space-y-4 mt-6">
                <div className="bg-green-50 p-4 rounded-lg">
                  <h3 className="font-medium mb-2">Text Practice</h3>
                  <p className="text-sm text-gray-600">Focus on reading, writing, and translation exercises</p>
                  <div className="flex items-center space-x-2 mt-3">
                    <BookOpen className="w-4 h-4 text-green-500" />
                    <span className="text-sm">Includes: Translation, Grammar, Vocabulary, Writing</span>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="image" className="space-y-4 mt-6">
                <div className="bg-purple-50 p-4 rounded-lg">
                  <h3 className="font-medium mb-2">Visual Practice</h3>
                  <p className="text-sm text-gray-600">Practice with images, cultural contexts, and visual cues</p>
                  <div className="flex items-center space-x-2 mt-3">
                    <ImageIcon className="w-4 h-4 text-purple-500" />
                    <span className="text-sm">Includes: Image recognition, Cultural scenes, Visual vocabulary</span>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="mixed" className="space-y-4 mt-6">
                <div className="bg-yellow-50 p-4 rounded-lg">
                  <h3 className="font-medium mb-2">Mixed Practice</h3>
                  <p className="text-sm text-gray-600">Comprehensive practice combining all modalities</p>
                  <div className="flex items-center space-x-2 mt-3">
                    <Brain className="w-4 h-4 text-yellow-500" />
                    <span className="text-sm">Includes: All exercise types for complete learning</span>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>

        {/* Settings */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Difficulty Level</CardTitle>
              <CardDescription>Adjust the challenge level</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span>Beginner</span>
                  <span>Advanced</span>
                </div>
                <Slider
                  value={difficulty}
                  onValueChange={setDifficulty}
                  max={5}
                  min={1}
                  step={1}
                  className="w-full"
                />
                <div className="text-center">
                  <Badge variant="outline">
                    Level {difficulty[0]} - {['Beginner', 'Easy', 'Medium', 'Hard', 'Expert'][difficulty[0] - 1]}
                  </Badge>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Smart Features</CardTitle>
              <CardDescription>AI-powered learning enhancements</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center justify-between">
                <div>
                  <div className="font-medium">Adaptive Difficulty</div>
                  <div className="text-sm text-gray-600">Automatically adjust based on performance</div>
                </div>
                <Switch checked={adaptiveMode} onCheckedChange={setAdaptiveMode} />
              </div>
              <div className="text-xs text-gray-500">
                When enabled, the AI will adjust exercise difficulty based on your answers
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Session Info */}
        <Card>
          <CardContent className="p-6">
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div>
                <div className="text-2xl font-bold text-primary-500">{session.totalExercises}</div>
                <div className="text-sm text-gray-600">Exercises</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-secondary-500">5:00</div>
                <div className="text-sm text-gray-600">Time Limit</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-green-500">+50</div>
                <div className="text-sm text-gray-600">Max XP</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-yellow-500">★★★</div>
                <div className="text-sm text-gray-600">Possible Stars</div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Start Button */}
        <div className="text-center">
          <Button
            size="lg"
            onClick={handleStartPractice}
            className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-primary-600 hover:to-secondary-600 text-white px-8 py-4 text-lg font-semibold rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
          >
            <Zap className="w-5 h-5 mr-2 bg-black" />
            Start Practice Session
          </Button>
        </div>
      </div>
    );
  }

  if (!isSessionActive && currentExercise >= session.exercises.length) {
    // Session completed
    const totalPossiblePoints = session.exercises.reduce((sum: number, ex: any) => sum + ex.points, 0);
    const percentage = Math.round((score / totalPossiblePoints) * 100);
    let stars = 0;
    if (percentage >= 90) stars = 3;
    else if (percentage >= 70) stars = 2;
    else if (percentage >= 50) stars = 1;

    return (
      <div className="flex items-center justify-center h-full">
        <Card className="w-full max-w-lg">
          <CardHeader className="text-center">
            <Trophy className="w-16 h-16 mx-auto text-yellow-500 mb-4" />
            <CardTitle className="text-2xl">Practice Complete!</CardTitle>
            <CardDescription>
              Great work on your practice session
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="text-center space-y-2">
              <div className="flex justify-center space-x-1">
                {[1, 2, 3].map((i) => (
                  <Star
                    key={i}
                    className={`w-8 h-8 ${i <= stars ? 'text-yellow-500 fill-current' : 'text-gray-300'}`}
                  />
                ))}
              </div>
              <div className="text-3xl font-bold text-primary-500">{score} / {totalPossiblePoints}</div>
              <div className="text-gray-600">{percentage}% Score</div>
            </div>

            <div className="grid grid-cols-2 gap-4 text-center">
              <div>
                <div className="text-2xl font-bold text-green-500">{score}</div>
                <div className="text-sm text-gray-600">XP Earned</div>
              </div>
              <div>
                <div className="text-2xl font-bold text-blue-500">{streak}</div>
                <div className="text-sm text-gray-600">Best Streak</div>
              </div>
            </div>

            <div className="space-y-2">
              <Button className="w-full" onClick={() => window.location.reload()}>
                <RotateCcw className="w-4 h-4 mr-2" />
                Practice Again
              </Button>
              <Button variant="outline" className="w-full">
                <BookOpen className="w-4 h-4 mr-2" />
                Review Lessons
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Active practice session
  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Session Header */}
      <div className="flex items-center justify-between">
        <div className="space-y-1">
          <h1 className="text-2xl font-bold text-gray-900">Practice Session</h1>
          <div className="flex items-center space-x-4 text-sm text-gray-600">
            <span>Exercise {currentExercise + 1} of {session.exercises.length}</span>
            <Badge variant="outline" className="flex items-center space-x-1">
              <Clock className="w-3 h-3" />
              <span>{formatTime(timeRemaining)}</span>
            </Badge>
          </div>
        </div>
        
        <div className="flex items-center space-x-4">
          <div className="text-right">
            <div className="text-lg font-bold text-primary-500">{score}</div>
            <div className="text-xs text-gray-600">Score</div>
          </div>
          <div className="text-right">
            <div className="text-lg font-bold text-yellow-500">{streak}</div>
            <div className="text-xs text-gray-600">Streak</div>
          </div>
        </div>
      </div>

      {/* Progress */}
      <Progress value={progress} className="h-2" />

      {/* Main Exercise */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2">
          <Card className="h-full">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle className="flex items-center space-x-2">
                  <Badge className="capitalize">{currentExerciseData.type.replace('_', ' ')}</Badge>
                  <span>{currentExerciseData.points} pts</span>
                </CardTitle>
                {currentExerciseData.content.audio && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => playAudio(currentExerciseData.content.audio!)}
                  >
                    {isAudioPlaying ? <Pause className="w-4 h-4" /> : <Play className="w-4 h-4" />}
                  </Button>
                )}
              </div>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Exercise Content */}
              <div className="text-lg text-gray-900">{currentExerciseData.content.text}</div>

              {/* Exercise Type Specific UI */}
              {currentExerciseData.type === 'pronunciation' && (
                <div className="space-y-4">
                  <div className="bg-blue-50 p-4 rounded-lg text-center">
                    <div className="text-2xl font-bold text-blue-600 mb-2">
                      {currentExerciseData.content.targetPhrase}
                    </div>
                    <Button
                      size="lg"
                      variant={isRecording ? "destructive" : "default"}
                      onClick={isRecording ? stopRecording : startRecording}
                      className="mb-4"
                    >
                      {isRecording ? (
                        <>
                          <Square className="w-5 h-5 mr-2" />
                          Stop Recording
                        </>
                      ) : (
                        <>
                          <Mic className="w-5 h-5 mr-2" />
                          Start Recording
                        </>
                      )}
                    </Button>
                    {isRecording && (
                      <div className="flex items-center justify-center space-x-2">
                        <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" />
                        <span className="text-sm text-gray-600">Recording...</span>
                        <div 
                          className="w-20 h-1 bg-gray-200 rounded-full overflow-hidden"
                        >
                          <div 
                            className={`h-full bg-blue-500 transition-all duration-100 w-[${audioLevel}%]`}
                          />
                        </div>
                      </div>
                    )}
                  </div>
                  {currentExerciseData.content.culturalNote && (
                    <div className="text-sm text-gray-600 italic">
                      💡 {currentExerciseData.content.culturalNote}
                    </div>
                  )}
                </div>
              )}

              {currentExerciseData.type === 'translation' && (
                <div className="space-y-4">
                  <div className="p-4 bg-gray-50 rounded-lg text-center">
                    <div className="text-xl font-semibold text-kpelle-600">
                      {currentExerciseData.content.sourceText}
                    </div>
                    <div className="text-sm text-gray-500 mt-1">
                      ({currentExerciseData.content.sourceLanguage})
                    </div>
                  </div>
                  <input
                    type="text"
                    value={userAnswer}
                    onChange={(e) => setUserAnswer(e.target.value)}
                    placeholder={`Type translation in ${currentExerciseData.content.targetLanguage}...`}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    disabled={showFeedback}
                  />
                </div>
              )}

              {currentExerciseData.type === 'listening' && (
                <div className="space-y-4">
                  <div className="bg-green-50 p-6 rounded-lg text-center">
                    <Button
                      size="lg"
                      onClick={() => currentExerciseData.content.audio && playAudio(currentExerciseData.content.audio)}
                      className="mb-4"
                    >
                      <Volume2 className="w-5 h-5 mr-2" />
                      Play Audio
                    </Button>
                    <p className="text-sm text-gray-600">{currentExerciseData.content.instructions}</p>
                  </div>
                  <input
                    type="text"
                    value={userAnswer}
                    onChange={(e) => setUserAnswer(e.target.value)}
                    placeholder="Type what you heard..."
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent"
                    disabled={showFeedback}
                  />
                </div>
              )}

              {(currentExerciseData.type === 'cultural' || currentExerciseData.type === 'image_recognition') && (
                <div className="space-y-4">
                  {currentExerciseData.content.image && (
                    <div className="w-full h-48 bg-gray-100 rounded-lg flex items-center justify-center">
                      <ImageIcon className="w-12 h-12 text-gray-400" />
                      <span className="ml-2 text-gray-500">Cultural Image</span>
                    </div>
                  )}
                  <div className="grid gap-2">
                    {currentExerciseData.content.options?.map((option: any, index: number) => (
                      <Button
                        key={index}
                        variant={userAnswer === option ? "default" : "outline"}
                        className="justify-start p-4 h-auto"
                        onClick={() => setUserAnswer(option)}
                        disabled={showFeedback}
                      >
                        {option}
                      </Button>
                    ))}
                  </div>
                  {currentExerciseData.content.culturalNote && (
                    <div className="text-sm text-gray-600 italic">
                      🌍 {currentExerciseData.content.culturalNote}
                    </div>
                  )}
                </div>
              )}

              {/* Feedback */}
              {showFeedback && (
                <div className={`p-4 rounded-lg ${
                  userAnswer.toLowerCase() === currentExerciseData.expectedAnswer.toLowerCase()
                    ? 'bg-green-50 border border-green-200' 
                    : 'bg-red-50 border border-red-200'
                }`}>
                  <div className="flex items-center space-x-2">
                    {userAnswer.toLowerCase() === currentExerciseData.expectedAnswer.toLowerCase() ? (
                      <CheckCircle2 className="w-5 h-5 text-green-600" />
                    ) : (
                      <XCircle className="w-5 h-5 text-red-600" />
                    )}
                    <span className="font-medium">
                      {userAnswer.toLowerCase() === currentExerciseData.expectedAnswer.toLowerCase() 
                        ? `Correct! +${currentExerciseData.points} points` 
                        : 'Incorrect'}
                    </span>
                  </div>
                  {userAnswer.toLowerCase() !== currentExerciseData.expectedAnswer.toLowerCase() && (
                    <p className="text-sm text-gray-600 mt-1">
                      Correct answer: {currentExerciseData.expectedAnswer}
                    </p>
                  )}
                </div>
              )}

              {/* Actions */}
              <div className="flex justify-between pt-4">
                <Button variant="outline" onClick={handleSkipExercise}>
                  Skip Exercise
                </Button>
                
                <Button
                  onClick={handleSubmitAnswer}
                  disabled={!userAnswer || showFeedback}
                  className="bg-primary-500 hover:bg-primary-600"
                >
                  Submit Answer
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          {/* Session Stats */}
          <Card>
            <CardHeader>
              <CardTitle className="text-sm">Session Progress</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex justify-between text-sm">
                <span>Completed:</span>
                <span>{currentExercise}/{session.exercises.length}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Score:</span>
                <span className="font-semibold text-primary-500">{score}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Streak:</span>
                <span className="font-semibold text-yellow-500">{streak}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span>Time:</span>
                <span className="font-mono">{formatTime(timeRemaining)}</span>
              </div>
            </CardContent>
          </Card>

          {/* Cultural Context */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2 text-sm">
                <Globe className="w-4 h-4" />
                <span>Cultural Context</span>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-32">
                <div className="space-y-2 text-xs">
                  <p className="text-gray-600">{session.culturalContext.background}</p>
                  <div className="space-y-1">
                    {session.culturalContext.vocabulary.map((item: any, index: number) => (
                      <div key={index}>
                        <span className="font-medium text-kpelle-600">{item.kpelle}</span> - {item.english}
                      </div>
                    ))}
                  </div>
                </div>
              </ScrollArea>
            </CardContent>
          </Card>

          {/* Quick Actions */}
          <Card>
            <CardHeader>
              <CardTitle className="text-sm">Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              <Button variant="outline" size="sm" className="w-full">
                <MessageSquare className="w-4 h-4 mr-2" />
                Ask AI Tutor
              </Button>
              <Button variant="outline" size="sm" className="w-full">
                <Volume2 className="w-4 h-4 mr-2" />
                Repeat Audio
              </Button>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
